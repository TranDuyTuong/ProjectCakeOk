// <auto-generated />
using System;
using Library.DomainData.DataEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.DomainData.Migrations
{
    [DbContext(typeof(ContextDBCakeOk))]
    [Migration("20230218032306_DB_CakeOk_5")]
    partial class DB_CakeOk_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Library.DataTable.TableBanner.T_ImageBannerWeb", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.ToTable("T_ImageBannerWebs");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.Property<byte[]>("IDBrach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDRegion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TimeWorking")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.Property<int?>("t_DistrictIDDistrict")
                        .HasColumnType("int");

                    b.Property<int?>("t_RegionsIDRegion")
                        .HasColumnType("int");

                    b.HasKey("IDBrach");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDRegion");

                    b.HasIndex("t_CityIDCity");

                    b.HasIndex("t_DistrictIDDistrict");

                    b.HasIndex("t_RegionsIDRegion");

                    b.ToTable("T_Branchs");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Regions", b =>
                {
                    b.Property<int>("IDRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDRegion");

                    b.ToTable("T_Regiones");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.Property<byte[]>("IDCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Buy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<int>("IDDiscount")
                        .HasColumnType("int");

                    b.Property<int>("IDElement")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDKindCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDNewCake")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDPrice")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDSmell")
                        .HasColumnType("int");

                    b.Property<int>("IDStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDTypeCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("NameCake")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoCake")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("double");

                    b.Property<int?>("t_CakeElementIDElement")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_CakePriceIDPrice")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_DiscountCakeIDDiscount")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_KindCakeIDKindCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_NewCakeIDNewCake")
                        .HasColumnType("int");

                    b.Property<int?>("t_SmellCakeIDSmell")
                        .HasColumnType("int");

                    b.Property<int?>("t_StatusCakeIDStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_TypeCakeIDTypeCake")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDCake");

                    b.HasIndex("IDDiscount");

                    b.HasIndex("IDElement");

                    b.HasIndex("IDKindCake");

                    b.HasIndex("IDNewCake");

                    b.HasIndex("IDPrice");

                    b.HasIndex("IDSmell");

                    b.HasIndex("IDStatus");

                    b.HasIndex("IDTypeCake");

                    b.HasIndex("t_CakeElementIDElement");

                    b.HasIndex("t_CakePriceIDPrice");

                    b.HasIndex("t_DiscountCakeIDDiscount");

                    b.HasIndex("t_KindCakeIDKindCake");

                    b.HasIndex("t_NewCakeIDNewCake");

                    b.HasIndex("t_SmellCakeIDSmell");

                    b.HasIndex("t_StatusCakeIDStatus");

                    b.HasIndex("t_TypeCakeIDTypeCake");

                    b.ToTable("T_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeElement", b =>
                {
                    b.Property<int>("IDElement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Egg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ElementOther")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Flour")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fruit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sugar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDElement");

                    b.ToTable("T_CakeElements");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeGift", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDGift")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_GiftIDGift")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDGift");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_GiftIDGift");

                    b.ToTable("T_CakeGifts");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeImage", b =>
                {
                    b.Property<byte[]>("IDImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<bool>("MainImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDImage");

                    b.HasIndex("IDCake");

                    b.HasIndex("t_CakeIDCake");

                    b.ToTable("T_CakeImages");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakePrice", b =>
                {
                    b.Property<byte[]>("IDPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<double?>("PriceDiscount")
                        .HasColumnType("double");

                    b.HasKey("IDPrice");

                    b.ToTable("T_CakePrices");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_DiscountCake", b =>
                {
                    b.Property<int>("IDDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameDiscount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PercentReduction")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDDiscount");

                    b.ToTable("T_DiscountCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Gift", b =>
                {
                    b.Property<byte[]>("IDGift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDGift");

                    b.ToTable("T_Gifts");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_KindCake", b =>
                {
                    b.Property<byte[]>("IDKindCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDKindCake");

                    b.ToTable("T_KindCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_NewCake", b =>
                {
                    b.Property<int>("IDNewCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDNewCake");

                    b.ToTable("T_NewCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_SmellCake", b =>
                {
                    b.Property<int>("IDSmell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDSmell");

                    b.ToTable("T_SmellCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_StatusCake", b =>
                {
                    b.Property<int>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDStatus");

                    b.ToTable("T_StatusCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_TypeCake", b =>
                {
                    b.Property<byte[]>("IDTypeCake")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDTypeCake");

                    b.ToTable("T_TypeCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_BillCakeCustom", b =>
                {
                    b.Property<byte[]>("IDBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("AmountCake")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCustom")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDPay")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDPriceCustom")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDStaff")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDTypePay")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<byte[]>("t_CustomCakeIDCustom")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomCakePriceIDPriceCustom")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_PayCustomCakeIDPay")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_StaffIDStaff")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_TypePayCustomCakeIDTypePay")
                        .HasColumnType("int");

                    b.HasKey("IDBill");

                    b.HasIndex("IDCustom");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDPriceCustom");

                    b.HasIndex("IDStaff");

                    b.HasIndex("IDTypePay");

                    b.HasIndex("t_CustomCakeIDCustom");

                    b.HasIndex("t_CustomCakePriceIDPriceCustom");

                    b.HasIndex("t_PayCustomCakeIDPay");

                    b.HasIndex("t_StaffIDStaff");

                    b.HasIndex("t_TypePayCustomCakeIDTypePay");

                    b.ToTable("T_BillCakeCustoms");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.Property<int>("IDIdea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IDSize")
                        .HasColumnType("int");

                    b.Property<int>("IDStatusIdea")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDTypeCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_SizeCakeIDSize")
                        .HasColumnType("int");

                    b.Property<int?>("t_StatusIdeaIDStatusIdea")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_TypeCakeIDTypeCake")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDIdea");

                    b.HasIndex("IDSize");

                    b.HasIndex("IDStatusIdea");

                    b.HasIndex("IDTypeCake");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_SizeCakeIDSize");

                    b.HasIndex("t_StatusIdeaIDStatusIdea");

                    b.HasIndex("t_TypeCakeIDTypeCake");

                    b.ToTable("T_CakeCustomIdeas");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.Property<byte[]>("IDCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDChef")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<int>("IDPay")
                        .HasColumnType("int");

                    b.Property<int>("IDStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("NameCustom")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoCustom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("t_CakeCustomIdeaIDIdea")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_ChefIDChef")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_PayCustomCakeIDPay")
                        .HasColumnType("int");

                    b.Property<int?>("t_StatusCustomCakeIDStatus")
                        .HasColumnType("int");

                    b.HasKey("IDCustom");

                    b.HasIndex("IDChef");

                    b.HasIndex("IDIdea");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDStatus");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeCustomIdeaIDIdea");

                    b.HasIndex("t_ChefIDChef");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_PayCustomCakeIDPay");

                    b.HasIndex("t_StatusCustomCakeIDStatus");

                    b.ToTable("T_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.Property<byte[]>("IDPriceCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCustom")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<byte[]>("t_CustomCakeIDCustom")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDPriceCustom");

                    b.HasIndex("IDCustom");

                    b.HasIndex("t_CustomCakeIDCustom");

                    b.ToTable("T_CustomCakePrices");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_ImageCustomIdea", b =>
                {
                    b.Property<byte[]>("IDImageCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("t_CakeCustomIdeaIDIdea")
                        .HasColumnType("int");

                    b.HasKey("IDImageCustom");

                    b.HasIndex("IDIdea");

                    b.HasIndex("t_CakeCustomIdeaIDIdea");

                    b.ToTable("T_ImageCustomIdeas");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_NotificationCustomCake", b =>
                {
                    b.Property<int>("IDNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IDIdea")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_CakeCustomIdeaIDIdea")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDNotification");

                    b.HasIndex("IDIdea");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeCustomIdeaIDIdea");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_NotificationCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_PayCustomCake", b =>
                {
                    b.Property<int>("IDPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDPay");

                    b.ToTable("T_PayCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_SizeCake", b =>
                {
                    b.Property<int>("IDSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDSize");

                    b.ToTable("T_SizeCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusCustomCake", b =>
                {
                    b.Property<int>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IDStatus");

                    b.ToTable("T_StatusCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusIdea", b =>
                {
                    b.Property<int>("IDStatusIdea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDStatusIdea");

                    b.ToTable("T_StatusIdeas");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", b =>
                {
                    b.Property<int>("IDTypePay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDTypePay");

                    b.ToTable("T_TypePayCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_UrlManagerCustomCake", b =>
                {
                    b.Property<byte[]>("IDUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDUrl");

                    b.ToTable("T_UrlManagerCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.Property<byte[]>("IDChef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDStaff")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoChef")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("t_StaffIDStaff")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDChef");

                    b.HasIndex("IDStaff");

                    b.HasIndex("t_StaffIDStaff");

                    b.ToTable("T_Chefs");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_ChefCake", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDChef")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_ChefIDChef")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDChef");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_ChefIDChef");

                    b.ToTable("T_ChefCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableComment.T_Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_Comments");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_InformationAuthor", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("ContentImage")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IDPosition")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("t_PositionIDPosition")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDPosition");

                    b.HasIndex("t_PositionIDPosition");

                    b.ToTable("T_InformationAuthors");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_Position", b =>
                {
                    b.Property<int>("IDPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDPosition");

                    b.ToTable("T_Positions");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_AddressUserDefaul", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDTypeAddress")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_DistrictIDDistrict")
                        .HasColumnType("int");

                    b.Property<int?>("t_TypeAddressIDTypeAddress")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDTypeAddress");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CityIDCity");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_DistrictIDDistrict");

                    b.HasIndex("t_TypeAddressIDTypeAddress");

                    b.ToTable("T_AddressUserDefauls");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CancelOrder", b =>
                {
                    b.Property<byte[]>("IDCancel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDOrder")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("t_OrderIDOrder")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDCancel");

                    b.HasIndex("IDOrder");

                    b.HasIndex("t_OrderIDOrder");

                    b.ToTable("T_CancelOrders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CartUser", b =>
                {
                    b.Property<byte[]>("IDCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDCart");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_CartUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.Property<byte[]>("IDInfomationOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmailCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpecteDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDBrach")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NoteCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhoneCustomer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<byte[]>("t_BranchIDBrach")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.Property<int?>("t_DistrictIDDistrict")
                        .HasColumnType("int");

                    b.HasKey("IDInfomationOrder");

                    b.HasIndex("IDBrach");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("t_BranchIDBrach");

                    b.HasIndex("t_CityIDCity");

                    b.HasIndex("t_DistrictIDDistrict");

                    b.ToTable("T_InfomationOrders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.Property<byte[]>("IDOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("CancelOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDInfomationOrder")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDPay")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDStatusOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("PercentReduction")
                        .HasColumnType("int");

                    b.Property<bool>("UseVocher")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_InfomationOrderIDInfomationOrder")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_StatusOrderIDStatusOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_TypePayIDPay")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDOrder");

                    b.HasIndex("IDInfomationOrder");

                    b.HasIndex("IDPay");

                    b.HasIndex("IDStatusOrder");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_InfomationOrderIDInfomationOrder");

                    b.HasIndex("t_StatusOrderIDStatusOrder");

                    b.HasIndex("t_TypePayIDPay");

                    b.ToTable("T_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_OrderDetail", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDGift")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDOrder")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDSmell")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDStaff")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_GiftIDGift")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_OrderIDOrder")
                        .HasColumnType("varbinary(16)");

                    b.Property<int?>("t_SmellCakeIDSmell")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_StaffIDStaff")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDGift");

                    b.HasIndex("IDOrder");

                    b.HasIndex("IDSmell");

                    b.HasIndex("IDStaff");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_GiftIDGift");

                    b.HasIndex("t_OrderIDOrder");

                    b.HasIndex("t_SmellCakeIDSmell");

                    b.HasIndex("t_StaffIDStaff");

                    b.ToTable("T_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_StatusOrder", b =>
                {
                    b.Property<int>("IDStatusOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PesentProgess")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDStatusOrder");

                    b.ToTable("T_StatusOrders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypeAddress", b =>
                {
                    b.Property<int>("IDTypeAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IDTypeAddress");

                    b.ToTable("T_TypeAddreses");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypePay", b =>
                {
                    b.Property<byte[]>("IDPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NamePay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDPay");

                    b.ToTable("T_TypePays");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_Ratings");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_RatingWebsite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_RatingWebsites");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_Role", b =>
                {
                    b.Property<byte[]>("IDRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discripttion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("Id")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameRole")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDRole");

                    b.ToTable("T_Roles");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_UserRole", b =>
                {
                    b.Property<int>("IDUserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDRole")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDStaff")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("t_RoleIDRole")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_StaffIDStaff")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDUserRole");

                    b.HasIndex("IDRole");

                    b.HasIndex("IDStaff");

                    b.HasIndex("t_RoleIDRole");

                    b.HasIndex("t_StaffIDStaff");

                    b.ToTable("T_UserRoles");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_BannerRotationLuck", b =>
                {
                    b.Property<int>("IDBackRound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDBackRound");

                    b.ToTable("T_BannerRotationLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_GiftLuck", b =>
                {
                    b.Property<byte[]>("IDLuck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ContentImage")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameGift")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDLuck");

                    b.ToTable("T_GiftLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryGetGiftUserRotaionLuck", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDLuck")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_GiftLuckIDLuck")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDLuck");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_GiftLuckIDLuck");

                    b.ToTable("T_HistoryGetGiftUserRotaionLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryTurnRotaionLuck", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_HistoryTurnRotaionLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_RotationLuck", b =>
                {
                    b.Property<byte[]>("IDRotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDLuck")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<double>("PercentPage")
                        .HasColumnType("double");

                    b.Property<byte[]>("t_GiftLuckIDLuck")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDRotation");

                    b.HasIndex("IDLuck");

                    b.HasIndex("t_GiftLuckIDLuck");

                    b.ToTable("T_RotationLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_TakeTurnsRotaionLuck", b =>
                {
                    b.Property<int>("IDTurns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountTakeTurn")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDTurns");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_TakeTurnsRotaionLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.Property<byte[]>("IDStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ContentFile")
                        .HasColumnType("binary");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("IDAccount")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<string>("IDCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDGender")
                        .HasColumnType("int");

                    b.Property<int>("IDMarriage")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDStaffOrChef")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TypeImage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.Property<int?>("t_CustomerOrStaffIDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int?>("t_DistrictIDDistrict")
                        .HasColumnType("int");

                    b.Property<int?>("t_GenderIDGender")
                        .HasColumnType("int");

                    b.Property<int?>("t_MarriageIDMarriage")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_StaffOrChefIDStaffOrChef")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_UserIDAccount")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDStaff");

                    b.HasIndex("IDAccount");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDCustomerOrStaff");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDGender");

                    b.HasIndex("IDMarriage");

                    b.HasIndex("IDStaffOrChef");

                    b.HasIndex("t_CityIDCity");

                    b.HasIndex("t_CustomerOrStaffIDCustomerOrStaff");

                    b.HasIndex("t_DistrictIDDistrict");

                    b.HasIndex("t_GenderIDGender");

                    b.HasIndex("t_MarriageIDMarriage");

                    b.HasIndex("t_StaffOrChefIDStaffOrChef");

                    b.HasIndex("t_UserIDAccount");

                    b.ToTable("T_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_StaffOrChef", b =>
                {
                    b.Property<byte[]>("IDStaffOrChef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDStaffOrChef");

                    b.ToTable("T_StaffOrChefs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ChangePassword", b =>
                {
                    b.Property<byte[]>("IDChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailRequest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IDChange");

                    b.ToTable("T_ChangePasswords");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_City", b =>
                {
                    b.Property<int>("IDCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDCity");

                    b.ToTable("T_Citys");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Country", b =>
                {
                    b.Property<int>("IDCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDCountry");

                    b.ToTable("T_Countrys");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.Property<byte[]>("IDUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ContentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("IDAccount")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<int>("IDCountry")
                        .HasColumnType("int");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int>("IDDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IDGender")
                        .HasColumnType("int");

                    b.Property<string>("MimeFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.Property<int?>("t_CountryIDCountry")
                        .HasColumnType("int");

                    b.Property<int?>("t_CustomerOrStaffIDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<int?>("t_DistrictIDDistrict")
                        .HasColumnType("int");

                    b.Property<int?>("t_GenderIDGender")
                        .HasColumnType("int");

                    b.Property<byte[]>("t_UserIDAccount")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IDUser");

                    b.HasIndex("IDAccount");

                    b.HasIndex("IDCity");

                    b.HasIndex("IDCountry");

                    b.HasIndex("IDCustomerOrStaff");

                    b.HasIndex("IDDistrict");

                    b.HasIndex("IDGender");

                    b.HasIndex("t_CityIDCity");

                    b.HasIndex("t_CountryIDCountry");

                    b.HasIndex("t_CustomerOrStaffIDCustomerOrStaff");

                    b.HasIndex("t_DistrictIDDistrict");

                    b.HasIndex("t_GenderIDGender");

                    b.HasIndex("t_UserIDAccount");

                    b.ToTable("T_Customers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_CustomerOrStaff", b =>
                {
                    b.Property<int>("IDCustomerOrStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IDCustomerOrStaff");

                    b.ToTable("T_CustomerOrStaffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.Property<int>("IDDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDCity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("t_CityIDCity")
                        .HasColumnType("int");

                    b.HasKey("IDDistrict");

                    b.HasIndex("IDCity");

                    b.HasIndex("t_CityIDCity");

                    b.ToTable("T_Districts");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Gender", b =>
                {
                    b.Property<int>("IDGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDGender");

                    b.ToTable("T_Genders");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_HistorySeachUser", b =>
                {
                    b.Property<byte[]>("IdSeach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("SeachName")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("IdSeach");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_HistorySeachUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Marriage", b =>
                {
                    b.Property<int>("IDMarriage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDMarriage");

                    b.ToTable("T_Marriages");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.Property<byte[]>("IDAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IDCustomerOrStaff")
                        .HasColumnType("int");

                    b.Property<byte[]>("Id")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("t_CustomerOrStaffIDCustomerOrStaff")
                        .HasColumnType("int");

                    b.HasKey("IDAccount");

                    b.HasIndex("IDCustomerOrStaff");

                    b.HasIndex("t_CustomerOrStaffIDCustomerOrStaff");

                    b.ToTable("T_Users");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ViewerCakeUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<byte[]>("IDCake")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CakeIDCake")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDCake");

                    b.HasIndex("IDUser");

                    b.HasIndex("t_CakeIDCake");

                    b.HasIndex("t_CustomerIDUser");

                    b.ToTable("T_ViewerCakeUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUseVocher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDVocher")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_VocherIDVocher")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.HasIndex("IDVocher");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_VocherIDVocher");

                    b.ToTable("T_HistoryUseVochers");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUserGetVocher", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IDUser")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("IDVocher")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("StatusUseVocher")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("t_CustomerIDUser")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("t_VocherIDVocher")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("ID");

                    b.HasIndex("IDUser");

                    b.HasIndex("IDVocher");

                    b.HasIndex("t_CustomerIDUser");

                    b.HasIndex("t_VocherIDVocher");

                    b.ToTable("T_HistoryUserGetVochers");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_Vocher", b =>
                {
                    b.Property<byte[]>("IDVocher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameVocher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PercenReduction")
                        .HasColumnType("int");

                    b.HasKey("IDVocher");

                    b.ToTable("T_Vochers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<byte[]>("RoleId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<byte[]>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("RoleId")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<byte[]>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", null)
                        .WithMany()
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableBranch.T_Regions", null)
                        .WithMany()
                        .HasForeignKey("IDRegion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Branches")
                        .HasForeignKey("t_CityIDCity");

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Branches")
                        .HasForeignKey("t_DistrictIDDistrict");

                    b.HasOne("Library.DataTable.TableBranch.T_Regions", "t_Regions")
                        .WithMany("t_Branch")
                        .HasForeignKey("t_RegionsIDRegion");

                    b.Navigation("t_City");

                    b.Navigation("t_District");

                    b.Navigation("t_Regions");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_DiscountCake", null)
                        .WithMany()
                        .HasForeignKey("IDDiscount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_CakeElement", null)
                        .WithMany()
                        .HasForeignKey("IDElement")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_KindCake", null)
                        .WithMany()
                        .HasForeignKey("IDKindCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_NewCake", null)
                        .WithMany()
                        .HasForeignKey("IDNewCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_CakePrice", null)
                        .WithMany()
                        .HasForeignKey("IDPrice")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", null)
                        .WithMany()
                        .HasForeignKey("IDSmell")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_StatusCake", null)
                        .WithMany()
                        .HasForeignKey("IDStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", null)
                        .WithMany()
                        .HasForeignKey("IDTypeCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_CakeElement", "t_CakeElement")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_CakeElementIDElement");

                    b.HasOne("Library.DataTable.TableCake.T_CakePrice", "t_CakePrice")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_CakePriceIDPrice");

                    b.HasOne("Library.DataTable.TableCake.T_DiscountCake", "t_DiscountCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_DiscountCakeIDDiscount");

                    b.HasOne("Library.DataTable.TableCake.T_KindCake", "t_KindCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_KindCakeIDKindCake");

                    b.HasOne("Library.DataTable.TableCake.T_NewCake", "t_NewCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_NewCakeIDNewCake");

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", "t_SmellCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_SmellCakeIDSmell");

                    b.HasOne("Library.DataTable.TableCake.T_StatusCake", "t_StatusCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_StatusCakeIDStatus");

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", "t_TypeCake")
                        .WithMany("t_Cakes")
                        .HasForeignKey("t_TypeCakeIDTypeCake");

                    b.Navigation("t_CakeElement");

                    b.Navigation("t_CakePrice");

                    b.Navigation("t_DiscountCake");

                    b.Navigation("t_KindCake");

                    b.Navigation("t_NewCake");

                    b.Navigation("t_SmellCake");

                    b.Navigation("t_StatusCake");

                    b.Navigation("t_TypeCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeGift", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Gift", null)
                        .WithMany()
                        .HasForeignKey("IDGift")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CakeGifts")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableCake.T_Gift", "t_Gift")
                        .WithMany("t_CakeGifts")
                        .HasForeignKey("t_GiftIDGift");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Gift");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeImage", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CakeImages")
                        .HasForeignKey("t_CakeIDCake");

                    b.Navigation("t_Cake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_BillCakeCustom", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCakePrice", null)
                        .WithMany()
                        .HasForeignKey("IDPriceCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", null)
                        .WithMany()
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDTypePay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", "t_CustomCake")
                        .WithMany("t_BillCakeCustom")
                        .HasForeignKey("t_CustomCakeIDCustom");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCakePrice", "t_CustomCakePrice")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("t_CustomCakePriceIDPriceCustom");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", "t_PayCustomCake")
                        .WithMany("t_BillCakeCustom")
                        .HasForeignKey("t_PayCustomCakeIDPay");

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("t_StaffIDStaff");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", "t_TypePayCustomCake")
                        .WithMany("t_BillCakeCustoms")
                        .HasForeignKey("t_TypePayCustomCakeIDTypePay");

                    b.Navigation("t_CustomCake");

                    b.Navigation("t_CustomCakePrice");

                    b.Navigation("t_PayCustomCake");

                    b.Navigation("t_Staff");

                    b.Navigation("t_TypePayCustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_SizeCake", null)
                        .WithMany()
                        .HasForeignKey("IDSize")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusIdea", null)
                        .WithMany()
                        .HasForeignKey("IDStatusIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", null)
                        .WithMany()
                        .HasForeignKey("IDTypeCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CakeCustomIdeas")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_SizeCake", "t_SizeCake")
                        .WithMany("t_CakeCustomIdea")
                        .HasForeignKey("t_SizeCakeIDSize");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusIdea", "t_StatusIdea")
                        .WithMany("t_CakeCustomIdea")
                        .HasForeignKey("t_StatusIdeaIDStatusIdea");

                    b.HasOne("Library.DataTable.TableCake.T_TypeCake", "t_TypeCake")
                        .WithMany("t_CakeCustomIdeas")
                        .HasForeignKey("t_TypeCakeIDTypeCake");

                    b.Navigation("t_Customer");

                    b.Navigation("t_SizeCake");

                    b.Navigation("t_StatusIdea");

                    b.Navigation("t_TypeCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.HasOne("Library.DataTable.TableChef.T_Chef", null)
                        .WithMany()
                        .HasForeignKey("IDChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", null)
                        .WithMany()
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusCustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("t_CakeCustomIdeaIDIdea");

                    b.HasOne("Library.DataTable.TableChef.T_Chef", "t_Chef")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("t_ChefIDChef");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_PayCustomCake", "t_PayCustomCake")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("t_PayCustomCakeIDPay");

                    b.HasOne("Library.DataTable.TableCakeCustom.T_StatusCustomCake", "t_StatusCustomCake")
                        .WithMany("t_CustomCakes")
                        .HasForeignKey("t_StatusCustomCakeIDStatus");

                    b.Navigation("t_CakeCustomIdea");

                    b.Navigation("t_Chef");

                    b.Navigation("t_Customer");

                    b.Navigation("t_PayCustomCake");

                    b.Navigation("t_StatusCustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", null)
                        .WithMany()
                        .HasForeignKey("IDCustom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CustomCake", "t_CustomCake")
                        .WithMany("t_CustomCakePrices")
                        .HasForeignKey("t_CustomCakeIDCustom");

                    b.Navigation("t_CustomCake");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_ImageCustomIdea", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", null)
                        .WithMany()
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_ImageCustomIdeas")
                        .HasForeignKey("t_CakeCustomIdeaIDIdea");

                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_NotificationCustomCake", b =>
                {
                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", null)
                        .WithMany()
                        .HasForeignKey("IDIdea")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", "t_CakeCustomIdea")
                        .WithMany("t_NotificationCustomCakes")
                        .HasForeignKey("t_CakeCustomIdeaIDIdea");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_NotificationCustomCakes")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_CakeCustomIdea");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.HasOne("Library.DataTable.TableStaff.T_Staff", null)
                        .WithMany()
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_Chefs")
                        .HasForeignKey("t_StaffIDStaff");

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_ChefCake", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableChef.T_Chef", null)
                        .WithMany()
                        .HasForeignKey("IDChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_ChefCakes")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableChef.T_Chef", "t_Chef")
                        .WithMany("t_ChefCakes")
                        .HasForeignKey("t_ChefIDChef");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Chef");
                });

            modelBuilder.Entity("Library.DataTable.TableComment.T_Comment", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_Comments")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Comments")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_InformationAuthor", b =>
                {
                    b.HasOne("Library.DataTable.TableInformationAuthor.T_Position", null)
                        .WithMany()
                        .HasForeignKey("IDPosition")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableInformationAuthor.T_Position", "t_Position")
                        .WithMany("t_InformationAuthors")
                        .HasForeignKey("t_PositionIDPosition");

                    b.Navigation("t_Position");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_AddressUserDefaul", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", null)
                        .WithMany()
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_TypeAddress", null)
                        .WithMany()
                        .HasForeignKey("IDTypeAddress")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("t_CityIDCity");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_AddressUserDefauls")
                        .HasForeignKey("t_DistrictIDDistrict");

                    b.HasOne("Library.DataTable.TableOrder.T_TypeAddress", "t_TypeAddress")
                        .WithMany("t_AddressUserDefaul")
                        .HasForeignKey("t_TypeAddressIDTypeAddress");

                    b.Navigation("t_City");

                    b.Navigation("t_Customer");

                    b.Navigation("t_District");

                    b.Navigation("t_TypeAddress");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CancelOrder", b =>
                {
                    b.HasOne("Library.DataTable.TableOrder.T_Order", null)
                        .WithMany()
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_Order", "t_Order")
                        .WithMany()
                        .HasForeignKey("t_OrderIDOrder");

                    b.Navigation("t_Order");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_CartUser", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_CartUsers")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_CartUsers")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.HasOne("Library.DataTable.TableBranch.T_Branch", null)
                        .WithMany()
                        .HasForeignKey("IDBrach")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", null)
                        .WithMany()
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableBranch.T_Branch", "t_Branch")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("t_BranchIDBrach");

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("t_CityIDCity");

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_InfomationOrders")
                        .HasForeignKey("t_DistrictIDDistrict");

                    b.Navigation("t_Branch");

                    b.Navigation("t_City");

                    b.Navigation("t_District");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.HasOne("Library.DataTable.TableOrder.T_InfomationOrder", null)
                        .WithMany()
                        .HasForeignKey("IDInfomationOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_TypePay", null)
                        .WithMany()
                        .HasForeignKey("IDPay")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_StatusOrder", null)
                        .WithMany()
                        .HasForeignKey("IDStatusOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Orders")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableOrder.T_InfomationOrder", "t_InfomationOrder")
                        .WithMany("t_Orders")
                        .HasForeignKey("t_InfomationOrderIDInfomationOrder");

                    b.HasOne("Library.DataTable.TableOrder.T_StatusOrder", "t_StatusOrder")
                        .WithMany("t_Orders")
                        .HasForeignKey("t_StatusOrderIDStatusOrder");

                    b.HasOne("Library.DataTable.TableOrder.T_TypePay", "t_TypePay")
                        .WithMany("t_Orders")
                        .HasForeignKey("t_TypePayIDPay");

                    b.Navigation("t_Customer");

                    b.Navigation("t_InfomationOrder");

                    b.Navigation("t_StatusOrder");

                    b.Navigation("t_TypePay");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_OrderDetail", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Gift", null)
                        .WithMany()
                        .HasForeignKey("IDGift")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableOrder.T_Order", null)
                        .WithMany()
                        .HasForeignKey("IDOrder")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", null)
                        .WithMany()
                        .HasForeignKey("IDSmell")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", null)
                        .WithMany()
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableCake.T_Gift", "t_Gift")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("t_GiftIDGift");

                    b.HasOne("Library.DataTable.TableOrder.T_Order", "t_Order")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("t_OrderIDOrder");

                    b.HasOne("Library.DataTable.TableCake.T_SmellCake", "t_SmellCake")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("t_SmellCakeIDSmell");

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_OrderDetails")
                        .HasForeignKey("t_StaffIDStaff");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Gift");

                    b.Navigation("t_Order");

                    b.Navigation("t_SmellCake");

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_Rating", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_Ratings")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_Ratings")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRating.T_RatingWebsite", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_RatingWebsites")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_UserRole", b =>
                {
                    b.HasOne("Library.DataTable.TableRole.T_Role", null)
                        .WithMany()
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", null)
                        .WithMany()
                        .HasForeignKey("IDStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableRole.T_Role", "t_Role")
                        .WithMany("t_UserRoles")
                        .HasForeignKey("t_RoleIDRole");

                    b.HasOne("Library.DataTable.TableStaff.T_Staff", "t_Staff")
                        .WithMany("t_UserRoles")
                        .HasForeignKey("t_StaffIDStaff");

                    b.Navigation("t_Role");

                    b.Navigation("t_Staff");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryGetGiftUserRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", null)
                        .WithMany()
                        .HasForeignKey("IDLuck")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryGetGiftUserRotaionLucks")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", "t_GiftLuck")
                        .WithMany("t_HistoryGetGiftUserRotaionLucks")
                        .HasForeignKey("t_GiftLuckIDLuck");

                    b.Navigation("t_Customer");

                    b.Navigation("t_GiftLuck");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_HistoryTurnRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryTurnRotaionLucks")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_RotationLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", null)
                        .WithMany()
                        .HasForeignKey("IDLuck")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableRotationLuck.T_GiftLuck", "t_GiftLuck")
                        .WithMany("t_RotationLucks")
                        .HasForeignKey("t_GiftLuckIDLuck");

                    b.Navigation("t_GiftLuck");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_TakeTurnsRotaionLuck", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_TakeTurnsRotaionLucks")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_User", null)
                        .WithMany()
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", null)
                        .WithMany()
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", null)
                        .WithMany()
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Gender", null)
                        .WithMany()
                        .HasForeignKey("IDGender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Marriage", null)
                        .WithMany()
                        .HasForeignKey("IDMarriage")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableStaff.T_StaffOrChef", null)
                        .WithMany()
                        .HasForeignKey("IDStaffOrChef")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_CityIDCity");

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_CustomerOrStaffIDCustomerOrStaff");

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_DistrictIDDistrict");

                    b.HasOne("Library.DataTable.TableUser.T_Gender", "t_Gender")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_GenderIDGender");

                    b.HasOne("Library.DataTable.TableUser.T_Marriage", "t_Marriage")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_MarriageIDMarriage");

                    b.HasOne("Library.DataTable.TableStaff.T_StaffOrChef", "t_StaffOrChef")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_StaffOrChefIDStaffOrChef");

                    b.HasOne("Library.DataTable.TableUser.T_User", "t_User")
                        .WithMany("t_Staffs")
                        .HasForeignKey("t_UserIDAccount");

                    b.Navigation("t_City");

                    b.Navigation("t_CustomerOrStaff");

                    b.Navigation("t_District");

                    b.Navigation("t_Gender");

                    b.Navigation("t_Marriage");

                    b.Navigation("t_StaffOrChef");

                    b.Navigation("t_User");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_User", null)
                        .WithMany()
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Country", null)
                        .WithMany()
                        .HasForeignKey("IDCountry")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", null)
                        .WithMany()
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_District", null)
                        .WithMany()
                        .HasForeignKey("IDDistrict")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Gender", null)
                        .WithMany()
                        .HasForeignKey("IDGender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_CityIDCity");

                    b.HasOne("Library.DataTable.TableUser.T_Country", "t_Country")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_CountryIDCountry");

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_CustomerOrStaffIDCustomerOrStaff");

                    b.HasOne("Library.DataTable.TableUser.T_District", "t_District")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_DistrictIDDistrict");

                    b.HasOne("Library.DataTable.TableUser.T_Gender", "t_Gender")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_GenderIDGender");

                    b.HasOne("Library.DataTable.TableUser.T_User", "t_User")
                        .WithMany("t_Customers")
                        .HasForeignKey("t_UserIDAccount");

                    b.Navigation("t_City");

                    b.Navigation("t_Country");

                    b.Navigation("t_CustomerOrStaff");

                    b.Navigation("t_District");

                    b.Navigation("t_Gender");

                    b.Navigation("t_User");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_City", null)
                        .WithMany()
                        .HasForeignKey("IDCity")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_City", "t_City")
                        .WithMany("t_Districts")
                        .HasForeignKey("t_CityIDCity");

                    b.Navigation("t_City");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_HistorySeachUser", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistorySeachUsers")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", null)
                        .WithMany()
                        .HasForeignKey("IDCustomerOrStaff")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_CustomerOrStaff", "t_CustomerOrStaff")
                        .WithMany("t_Users")
                        .HasForeignKey("t_CustomerOrStaffIDCustomerOrStaff");

                    b.Navigation("t_CustomerOrStaff");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_ViewerCakeUser", b =>
                {
                    b.HasOne("Library.DataTable.TableCake.T_Cake", null)
                        .WithMany()
                        .HasForeignKey("IDCake")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableCake.T_Cake", "t_Cake")
                        .WithMany("t_ViewerCakeUsers")
                        .HasForeignKey("t_CakeIDCake");

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_ViewerCakeUsers")
                        .HasForeignKey("t_CustomerIDUser");

                    b.Navigation("t_Cake");

                    b.Navigation("t_Customer");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUseVocher", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", null)
                        .WithMany()
                        .HasForeignKey("IDVocher")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryUseVochers")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", "t_Vocher")
                        .WithMany("t_HistoryUseVochers")
                        .HasForeignKey("t_VocherIDVocher");

                    b.Navigation("t_Customer");

                    b.Navigation("t_Vocher");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_HistoryUserGetVocher", b =>
                {
                    b.HasOne("Library.DataTable.TableUser.T_Customer", null)
                        .WithMany()
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", null)
                        .WithMany()
                        .HasForeignKey("IDVocher")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Library.DataTable.TableUser.T_Customer", "t_Customer")
                        .WithMany("t_HistoryUserGetVochers")
                        .HasForeignKey("t_CustomerIDUser");

                    b.HasOne("Library.DataTable.TableVocher.T_Vocher", "t_Vocher")
                        .WithMany("t_HistoryUserGetVocher")
                        .HasForeignKey("t_VocherIDVocher");

                    b.Navigation("t_Customer");

                    b.Navigation("t_Vocher");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Branch", b =>
                {
                    b.Navigation("t_InfomationOrders");
                });

            modelBuilder.Entity("Library.DataTable.TableBranch.T_Regions", b =>
                {
                    b.Navigation("t_Branch");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Cake", b =>
                {
                    b.Navigation("t_CakeGifts");

                    b.Navigation("t_CakeImages");

                    b.Navigation("t_CartUsers");

                    b.Navigation("t_ChefCakes");

                    b.Navigation("t_Comments");

                    b.Navigation("t_OrderDetails");

                    b.Navigation("t_Ratings");

                    b.Navigation("t_ViewerCakeUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakeElement", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_CakePrice", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_DiscountCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_Gift", b =>
                {
                    b.Navigation("t_CakeGifts");

                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_KindCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_NewCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_SmellCake", b =>
                {
                    b.Navigation("t_Cakes");

                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_StatusCake", b =>
                {
                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCake.T_TypeCake", b =>
                {
                    b.Navigation("t_CakeCustomIdeas");

                    b.Navigation("t_Cakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CakeCustomIdea", b =>
                {
                    b.Navigation("t_CustomCakes");

                    b.Navigation("t_ImageCustomIdeas");

                    b.Navigation("t_NotificationCustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustom");

                    b.Navigation("t_CustomCakePrices");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_CustomCakePrice", b =>
                {
                    b.Navigation("t_BillCakeCustoms");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_PayCustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustom");

                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_SizeCake", b =>
                {
                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusCustomCake", b =>
                {
                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_StatusIdea", b =>
                {
                    b.Navigation("t_CakeCustomIdea");
                });

            modelBuilder.Entity("Library.DataTable.TableCakeCustom.T_TypePayCustomCake", b =>
                {
                    b.Navigation("t_BillCakeCustoms");
                });

            modelBuilder.Entity("Library.DataTable.TableChef.T_Chef", b =>
                {
                    b.Navigation("t_ChefCakes");

                    b.Navigation("t_CustomCakes");
                });

            modelBuilder.Entity("Library.DataTable.TableInformationAuthor.T_Position", b =>
                {
                    b.Navigation("t_InformationAuthors");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_InfomationOrder", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_Order", b =>
                {
                    b.Navigation("t_OrderDetails");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_StatusOrder", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypeAddress", b =>
                {
                    b.Navigation("t_AddressUserDefaul");
                });

            modelBuilder.Entity("Library.DataTable.TableOrder.T_TypePay", b =>
                {
                    b.Navigation("t_Orders");
                });

            modelBuilder.Entity("Library.DataTable.TableRole.T_Role", b =>
                {
                    b.Navigation("t_UserRoles");
                });

            modelBuilder.Entity("Library.DataTable.TableRotationLuck.T_GiftLuck", b =>
                {
                    b.Navigation("t_HistoryGetGiftUserRotaionLucks");

                    b.Navigation("t_RotationLucks");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_Staff", b =>
                {
                    b.Navigation("t_BillCakeCustoms");

                    b.Navigation("t_Chefs");

                    b.Navigation("t_OrderDetails");

                    b.Navigation("t_UserRoles");
                });

            modelBuilder.Entity("Library.DataTable.TableStaff.T_StaffOrChef", b =>
                {
                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_City", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_Branches");

                    b.Navigation("t_Customers");

                    b.Navigation("t_Districts");

                    b.Navigation("t_InfomationOrders");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Country", b =>
                {
                    b.Navigation("t_Customers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Customer", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_CakeCustomIdeas");

                    b.Navigation("t_CartUsers");

                    b.Navigation("t_Comments");

                    b.Navigation("t_CustomCakes");

                    b.Navigation("t_HistoryGetGiftUserRotaionLucks");

                    b.Navigation("t_HistorySeachUsers");

                    b.Navigation("t_HistoryTurnRotaionLucks");

                    b.Navigation("t_HistoryUserGetVochers");

                    b.Navigation("t_HistoryUseVochers");

                    b.Navigation("t_NotificationCustomCakes");

                    b.Navigation("t_Orders");

                    b.Navigation("t_Ratings");

                    b.Navigation("t_RatingWebsites");

                    b.Navigation("t_TakeTurnsRotaionLucks");

                    b.Navigation("t_ViewerCakeUsers");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_CustomerOrStaff", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");

                    b.Navigation("t_Users");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_District", b =>
                {
                    b.Navigation("t_AddressUserDefauls");

                    b.Navigation("t_Branches");

                    b.Navigation("t_Customers");

                    b.Navigation("t_InfomationOrders");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Gender", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_Marriage", b =>
                {
                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableUser.T_User", b =>
                {
                    b.Navigation("t_Customers");

                    b.Navigation("t_Staffs");
                });

            modelBuilder.Entity("Library.DataTable.TableVocher.T_Vocher", b =>
                {
                    b.Navigation("t_HistoryUserGetVocher");

                    b.Navigation("t_HistoryUseVochers");
                });
#pragma warning restore 612, 618
        }
    }
}
